package jif.lang;

/**
 * Utility methods for principals. In particular, there are methods to test if
 * one principal acts for another, if two principals both act for each other, 
 * helper methods to both find and verify delegates-chains, and a method for 
 * dynamically acquiring a Capbility, which encapsulates the authority of a
 * principal to execute a Closure.
 */
public class PrincipalUtil {
    /**
     * Does the principal p act for the principal q? 
     */
    public static native boolean{p;q} acts_for(Principal p, Principal q);

    /**
     * Are the principals p and q equivalent to each other? That is,
     * does p act for q, and q act for p?
     * 
     */
    public static boolean{p;q} equivalentTo(Principal p, Principal q) {
        return acts_for(p, q) && acts_for(q, p);
    }

    /**
     * Search for a delegates-chain between p and q. An delegates-chain
     * between p and q is a Principal array <code>a</code> of 
     * length L such that
     *   <pre>
     *     a[L-1] == q
     *     a[L-1] delegates to a[L-2]
     *     ...
     *     a[1] delegates to a[0]
     *     a[0] == p
     *   </pre>.
     *  Thus, a valid delegate chain between p and q implies that p acts for q.
     * @param p
     * @param q
     * @return A delegates-chain between p and q, or null if non can be found.
     */
    public static native ActsForProof findActsForProof(Principal p, Principal q);

    /**
     * Verify that the chain is a valid delegates-chain between p and q. That is,
     * q == chain[n], chain[n] delegates to chain[n-1], ..., chain[0] == p, i.e.,
     * p acts for q.

     */
    public static native boolean verifyProof(ActsForProof{p;q} proof, 
                                             Principal p, Principal q);
    
    /**
     * Obtain a Capability for the given principal and closure.
     */
    public static native Capability[p, lb]{p; authPrf; c; lb} 
                authorize(principal p, Object authPrf, Closure[p, lb] c, label lb);
                
    /**
     * returns the null principal, the principal that every other principal can
     * act for.
     */                
    public static native principal{*!:*} nullPrincipal();
    
    public static native String stringValue(principal p); 
    public static native String toString(principal p); 
    
}
