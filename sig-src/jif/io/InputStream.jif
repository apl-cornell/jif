/*
 * This Jif class provides a wrapper for the corresponding Java io class.
 * This is necessitated by the label parameters, which require a runtime representation.
 *
 */
package jif.io;
import java.io.*;

public abstract class InputStream[label L] {
    public abstract int{L} read{L}() throws (IOException{L});
    public native int{L;b} read{L;b}(byte{L}[] b) throws (IOException{L;b});
    public native int{L;b} read{L;b}(byte{L}[] b, int{L} off, int{L} len) throws (IOException{L;b});
    public native long{L} skip(long{L} n) throws (IOException{L});
    public native int{L} available() throws (IOException{L});
    public native void close{L}() throws (IOException{L});
    public native void mark{L}(int{L} readlimit);
    public native void reset{L}() throws (IOException{L});
    public native boolean{L} markSupported();

}
