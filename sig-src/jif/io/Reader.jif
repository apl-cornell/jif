/*
 * This Jif class provides a wrapper for the corresponding Java io class.
 * This is necessitated by the label parameters, which require a runtime representation.
 *
 */
package jif.io;
import java.io.*;

public abstract class Reader[label L] {
    protected Reader() {}
    public native int{L} read{L}() throws (IOException{L});
    public native int{L;cbuf} read{L;cbuf}(char{L}[] cbuf) throws (IOException{L;cbuf});
    abstract public int{L;cbuf} read{L;cbuf}(char{L}[] cbuf, int{L} off, int{L} len) throws (IOException{L;cbuf});
    public native long{L} skip{L}(long{L} n) throws (IOException{L});
    public native boolean{L} ready() throws (IOException{L});
    public native boolean{L} markSupported();
    public native void mark{L}(int{L} readAheadLimit) throws (IOException{L});
    public native void reset{L}() throws (IOException{L});
    abstract public void close{L}() throws (IOException{L});
}
