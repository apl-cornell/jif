import java.io.PrintStream;
import jif.runtime.Runtime;

class Main authority (Alice, Bob, Chuck, broker) {
    public static final void main{⊤ <- }  (principal{*provider} p, String args[])  throws SecurityException, IllegalArgumentException  
	where authority (Alice, Bob, Chuck, broker), caller(p), provider actsfor p,
					  /*
	{*provider} <= {},
	{*provider} equiv {*AirlineExample.provider},
	{*provider} equiv {*IAirlineServer.provider},
	{*provider} <= {*AirlineServer.provider},
	{*provider} <= {*AirlineAgent.provider}
					  */
/*
	{*IAirlineServer.provider} equiv {*provider}, {*IAirlineServer.provider} <= {*AirlineServer.provider},
	{*IAirlineServer.provider} equiv {*AirlineAgent.provider},	
					 {*AirlineServer.provider} equiv {*AirlineAgent.provider}

*/

	 {*provider} <= {},
	 {*IAirlineServer.provider} equiv {*provider}, {*IAirlineServer.provider} <= {*AirlineServer.provider},
         {*IAirlineServer.provider} <= {*AirlineAgent.provider},  {*AirlineServer.provider} equiv {*AirlineAgent.provider},
	 {*provider} equiv {*AirlineExample.provider},

	 {*provider} equiv {broker <- }, 
	 {*AirlineServer.provider}  <= {Alice <- },
	 {*AirlineServer.provider } <= {Bob <-},
	 {*provider} actsfor broker, 
	 {*provider} actsfor Alice,
	 {*provider} actsfor Bob,
	 {*provider} actsfor Chuck

    {
	PrintStream[{}] out = null;
          try {
              Runtime[p] runtime = Runtime[p].getRuntime();
              out = runtime==null?null:runtime.stdout(new label {});
          }
          catch (SecurityException e) {
              // just let out be null.
          }

          PrintStream[{}] out1 = endorse(out, {*provider; p->; _<-_} to {{p→p; p<-*} ⊔ {⊤→⊤;⊤←⊤} ⊓ {*provider}});
          PrintStream[{}] out2 = declassify(out1,  {} );


	  if (broker actsfor Alice && broker actsfor Bob && broker actsfor Chuck ) {
		  new AirlineExample [Alice, Bob, Chuck, broker]  ().go(out2); 
	  }
    }

}
