import jif.util.List;
import jif.util.LinkedList;
import jif.util.Iterator;
import jif.util.NoSuchElementException;

/**
 * This class represents a board in the BattleShip game.
 *
 * A Board is a collection of ships that do not intersect with each other.
 *
 * It is parameterized by the label L, which is the level of
 * information that the board contains, and must be the same as the
 * level of information the Ships contain.  
 */
class Board {
    private final List[{_->_;*<-*}]{_->_;*<-*} ships;

    public Board() {
		this.ships = new LinkedList();
    }

    /**
     * @throws IllegalArgumentException if the ship to add intersects a ship
     *   already on the board.
     */
    public void addShip{_->_;*<-*}(Ship[{_->_;*<-*}]{_->_;*<-*} s) throws (IllegalArgumentException{_->_;*<-*}){
		List[{_->_;*<-*}]{_->_;*<-*} shps = this.ships;
		if (s != null && shps != null) {
			try {
			// check that we don't intersect with an existing ship.
			for (Iterator iter = shps.iterator(); iter != null && 
		                                                      iter.hasNext(); ) {
				Ship{_->_;*<-*} t = (Ship)iter.next();
				if (s.intersects(t)) {
					throw new IllegalArgumentException("Ship to add " +
		                                    "intersects an existing ship.");
				}
			}

			shps.add(s);
			}
			catch (ClassCastException impossible) { }
			catch (NoSuchElementException impossible) { }
		}
    }

    /**
     * Test if a ship occupies the coordinate coord
     */
    public boolean{_->_;*<-*} testPosition{_->_;*<-*}(Coordinate[{_->_;*<-*}]{_->_;*<-*} coord, label{_->_;*<-*} lbl) 
    {
	// go through each ship in turn, and test if it covers coord

		List[{_->_;*<-*}]{_->_;*<-*} shps = this.ships;
		if (shps != null) {
			int{_->_;*<-*} sz = shps.size();
			for (int i = 0; i < sz; i++) {
			try {
				Ship{_->_;*<-*} s = (Ship) shps.get(i);
				if (s != null && s.covers(coord)) {
					return true;
				}
			}
			catch (IndexOutOfBoundsException impossible) { }
			catch (ClassCastException impossible) { }
			}
		}
		return false;
    }    
    
    /**
     * Return a new board that has the endorsement of the principal o.
     * The label L is required to be equivalent to {p->*; p<-*}.
     */
    
}
