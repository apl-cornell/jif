import java.io.PrintStream;

/**
 * The class BattleShip is responsible for coordinating gameplay
 * between two Players, P1 and P2.
 */
class BattleShip[principal P1, principal P2] {
    /**
     * NUM_COVERED_COORDS is the number of covered coordinates that 
     * each player is to have on their board. Players can have any 
     * number of ships, so long as the ships cover this number of squares.
     */
    public static final int{rif[q0*:{_}];rifi[q1*:{}]} NUM_COVERED_COORDS = 10;

    public void play{rif[q1*:{_}];rifi[q1*:{}]}(PrintStream[{rifi[q1*:{}]}]{rifi[q1*:{}]} output) 
      throws (SecurityException, IllegalArgumentException{rifi[q1*:{}]})
	 {

        if (output == null) throw new IllegalArgumentException("Null output");

        output.println("Playing battleships, with each player having " + NUM_COVERED_COORDS + " covered coordinates");

        // Instantiate the two players
        Player[P1,P2]{rifi[q1*:{}]} player1 = new Player[P1,P2]();
        Player[P2,P1]{rifi[q1*:{}]} player2 = new Player[P2,P1]();

        // Initialize the two players.
        output.print("  Initializing....");
        
        // Player 1 first creates a board
        // The label for each element of the board is {rif[q0*:{P1},q1:{_},f1:q0->q1];rifi[q0*:{P1},q1:{},f2:q0->q1]}.
        // The label for the board itself is {rifi[q0*:{P1},q1:{},f2:q0->q1]}.
        Board[{rif[q0*:{P1},q1:{_},f1:q0->q1];rifi[q0*:{P1},q1:{},f2:q0->q1]}]{rifi[q0*:{P1},q1:{},f2:q0->q1]} 
            proposed1 = player1.init(NUM_COVERED_COORDS);

        // Player 2 endorses the elements of the board of Player 1 by calling reclElements.
        // The integrity of the endorsed elements is so high that neither players can modify them,
        // once they have been picked. 

        Board[{rif[q0*:{P1},q1:{_},f1:q0->q1];rifi[q1*:{}]}]{rifi[q0*:{P1},q1:{},f2:q0->q1]} accepted1 =
            player2.reclElements(proposed1);
        
        // Trigger an f2 reclassification (an endorsement) for the board itself, and then store it.
        player1.storeBoard(reclassify(accepted1,f2));

        // Similarly for Player 2: create a board, Player 1 endorses, and board is stored.
        Board[{rif[q0*:{P2},q1:{_},f1:q0->q1];rifi[q0*:{P2},q1:{},f2:q0->q1]}]{rifi[q0*:{P2},q1:{},f2:q0->q1]}
            proposed2 = player2.init(NUM_COVERED_COORDS);

        Board[{rif[q0*:{P2},q1:{_},f1:q0->q1];rifi[q1*:{}]}]{rifi[q0*:{P2},q1:{},f2:q0->q1]} accepted2 =
            player1.reclElements(proposed2);
        // Trigger an f2 reclassification (an endorsement) for the board itself, and then store it.
        player2.storeBoard(reclassify(accepted2,f2));
        
        output.println(" Done.");

        // These fields record how many hits each player has scored.
        // The game continues until one of the players has scored NUM_COVERED_COORDS hits.
        int{rif[q0*:{_}];rifi[q1*:{}]} player1Hits = 0;
        int{rif[q0*:{_}];rifi[q1*:{}]} player2Hits = 0;

        output.println("  Playing rounds...");
        Coordinate[{rif[q0*:{_}];rifi[q0*:{P1},q1:{},f3:q0->q1]}]{rifi[q0*:{P1},q1:{},f3:q0->q1]} play1Query;
        Coordinate[{rif[q0*:{_}];rifi[q1*:{}]}]{rifi[q1*:{}]} play1QueryEnd;
        boolean result,result2;
        Coordinate[{rif[q0*:{_}];rifi[q0*:{P2},q1:{},f3:q0->q1]}]{rifi[q0*:{P2},q1:{},f3:q0->q1]} play2Query;
        Coordinate[{rif[q0*:{_}];rifi[q1*:{}]}]{rifi[q1*:{}]} play2QueryEnd;
        
        // Loop until a player hits all the covered co-ordinates.
        while (player1Hits < NUM_COVERED_COORDS && player2Hits < NUM_COVERED_COORDS) {

            // Get Player 1's query
            play1Query = player1.getNextQuery();
            // Trigger an f3 reclassification (an endorsement) for the querry (i.e. the reference).
            play1QueryEnd = player2.reclassQuery(reclassify(play1Query,f3));
            
            // Player 1's query is endorsed by Player 2.

            output.print("\t"+PrincipalUtil.toString(P1)+": " + 
			 (play1QueryEnd==null?"null":play1QueryEnd.toString()) + 
                         "?  " );

            // Player 2 processes Player 1's query
            result = player2.processQuery(play1QueryEnd);
            player1Hits += result ? 1 : 0;
            output.print((result?"Y":"N"));

            
            if (player1Hits < NUM_COVERED_COORDS) {
                // Player 1 hasn't won, so let Player 2 ask a query...
                play2Query = player2.getNextQuery();
                // Trigger an f3 reclassification (an endorsement) for the querry (i.e. the reference).
                play2QueryEnd = player1.reclassQuery(reclassify(play2Query,f3));
                
                //Player 1 endorse's the query

                output.print("   "+PrincipalUtil.toString(P2)+": " + 
			     (play2QueryEnd==null?"null":play2QueryEnd.toString()) 
                             + "?  ");

                // Get player 1 to process player 2's query
                result2 = player1.processQuery(play2QueryEnd);
                
                player2Hits += result2 ? 1 : 0;       
                output.print((result2?"Y":"N"));
                
                // Print a running total of the scores...
                output.println("   Score: " + player1Hits + " vs. " + player2Hits);
            }
        }

        // Let's see who won...
        output.println("\n");
        output.println((player1Hits >= NUM_COVERED_COORDS ? PrincipalUtil.toString(P1) 
                                                          : PrincipalUtil.toString(P2)) 
                       + " won!");
    }
}
