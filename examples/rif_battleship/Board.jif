import jif.util.List;
import jif.util.LinkedList;
import jif.util.Iterator;
import jif.util.NoSuchElementException;

/**
 * This class represents a board in the BattleShip game.
 *
 * A Board is a collection of ships that do not intersect with each other.
 *
 * It is parameterized by the label L, which is the level of
 * information that the board contains, and must be the same as the
 * level of information the Ships contain.  
 */
class Board[label L] {
    private final List[L]{this} ships;

    public Board() {
	this.ships = new LinkedList[L]();
    }

    public List[L] Ships(){
       return this.ships;
    }

    /**
     * @throws IllegalArgumentException if the ship to add intersects a ship
     *   already on the board.
     */
    public void addShip{L}(Ship[L]{L} s) throws (IllegalArgumentException{L}) {
	List[L] shps = this.ships;
	if (s != null && shps != null) {
	    try {
		// Check that we don't intersect with an existing ship.
		for (Iterator[L] iter = shps.iterator(); iter != null && 
                                                          iter.hasNext(); ) {
		    Ship[L] t = (Ship[L])iter.next();
		    if (s.intersects(t)) {
			throw new IllegalArgumentException("Ship to add " +
                                        "intersects an existing ship.");
		    }
		}

		shps.add(s);
	    }
	    catch (ClassCastException impossible) { }
	    catch (NoSuchElementException impossible) { }
	}
    }

    /**
     * Test if a ship occupies the coordinate coord.
     */
    public boolean{*lbl;L;coord} testPosition{*lbl;L}(Coordinate[lbl] coord, 
                                                      label lbl) 
    {
	// Go through each ship in turn, and test if it covers coord.

	List[L] shps = this.ships;
	if (shps != null) {
	    int sz = shps.size();
	    for (int i = 0; i < sz; i++) {
		try {
		    Ship[L] s = (Ship[L])shps.get(i);
		    if (s != null && s.covers(coord, lbl)) {
			return true;
		    }
		}
		catch (IndexOutOfBoundsException impossible) { }
		catch (ClassCastException impossible) { }
	    }
	}
	return false;
    }    
   
}
