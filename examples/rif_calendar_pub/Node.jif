/**
 * This class implements the Node of a rifList.
 * Each node contains a field for an object and a field for the (dynamic) label that tags this object.
 * For this implementation, a node may also contain fields for additional dynamic labels and principals.
 * These additional fields are used to instantiate parameters of the corresponding object. 
 */

public class Node[label L] {
	
	final label{L} La;
	final label{L} Lb;
	final label{L} Lc;
	final jif.lang.Principal{L} O;
	private Node[L]{L} next;
	private final Object{*La} data;

	public Node(Object{*la} data, label{L} la) {
		this.La = la;
    	this.Lb = la;
		this.Lc = la;
		this.O=null;
		this.next = null;
		this.data = data;
	}

	public Node(Object{*la} data, label{L} la, label{L} lb) {
		this.La = la;
    	this.Lb = lb;
		this.Lc = lb;
		this.O=null;
		this.next = null;
		this.data = data;
	}

	public Node(Object{*la} data, label{L} la, label{L} lb, label{L} lc,jif.lang.Principal{L} o) {
		this.La = la;
   		this.Lb = lb;
    	this.Lc = lc;
		this.O=o;
		this.next = null;
		this.data = data;
	}

	public Object{*La} getData() {
		return this.data;
	}

	public Node[L]{L} getNext() {
		return next;
	}

	public void setNext{L}(Node[L]{L} next) {
		this.next = next;
	}
	
	public label{L} getLabel() {
		return La;
	}
	
}


