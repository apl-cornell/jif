public class Main {

	final public static void main{rif[q0*:{_}];rifi[q1*:{}]}
                     (principal{rifi[q1*:{}]} p, String args[]) : {rifi[q1*:{}]}
    {

		//for the api's we use id's instead of events because it is
		//also a way to make sure that events are found/transfered to correct lists.

		//System.out.println("Welcome to rif-Calendar!");

		Server{rif[q0*:{_}];rifi[q1*:{}]} srv = new Server();

		//f9 is a transition used in list operations
  		final label lsA = new label {rif[q1*:{Alice},q2:{_},q3:{_},f1:q1->q2,f2:q2->q1,f3:q1->q3,f9:q1->q3];
									rifi[q1*:{Alice},q2:{},q3:{Alice},q4:{},f7:q1->q2,f8:q2->q3,f9:q1->q4,f9:q2->q4]};
		final label ldA = new label {rif[q1*:{Alice},q2:{_},f9:q1->q2];
									rifi[q1*:{Alice},q2:{},q3:{Alice},q4:{},f7:q1->q2,f8:q2->q3,f9:q1->q4,f9:q2->q4]};
		final label ln = new label {rif[q0*:{_}];rifi[q1*:{}]};
		Calendar calA = srv.createCalendar(Alice,lsA,ldA);


		final label lsB = new label {rif[q1*:{Bob},q2:{_},q3:{_},f1:q1->q2,f2:q2->q1,f3:q1->q3,f9:q1->q3];
									rifi[q1*:{Bob},q2:{},q3:{Bob},q4:{},f7:q1->q2,f8:q2->q3,f9:q1->q4,f9:q2->q4]};
		final label ldB = new label {rif[q1*:{Bob},q2:{_},f9:q1->q2];
									rifi[q1*:{Bob},q2:{},q3:{Bob},q4:{},f7:q1->q2,f8:q2->q3,f9:q1->q4,f9:q2->q4]};
		Calendar calB = srv.createCalendar(Bob,lsB,ldB);

		Event[lsA,ldA,ln]{*lsA} eA = new Event[lsA,ldA,ln](new Date[lsA](23, 8, 2014), new TimeOfDay[lsA](10, 30), 30, "Meeting with Chris", calA, Alice);
		srv.addEvent(calA, eA, Alice, lsA, ldA);
		//srv.publicizeSlot(calA, e);
		eA = new Event[lsA,ldA,ln](new Date[lsA](16, 9, 2014), new TimeOfDay[lsA](16, 15), 60, "Doctor appointment", calA, Alice);
		//e.setAutoReject(true);
		srv.addEvent(calA, eA, Alice, lsA, ldA);
		//srv.publicizeSlot(calA, e);
		eA = new Event[lsA,ldA,ln](new Date[lsA](5, 10, 2014), new TimeOfDay[lsA](9, 30), 15, "Meeting with Chris", calA, Alice);
		srv.addEvent(calA, eA, Alice, lsA, ldA);

		Event[lsB,ldB,ln]{*lsB} eB = new Event[lsB,ldB,ln](new Date[lsB](15, 10, 2014), new TimeOfDay[lsB](14, 30), 30, "Go to barbershop", calB, Bob);
		srv.addEvent(calB, eB, Bob, lsB,ldB);
		eB = new Event[lsB,ldB,ln](new Date[lsB](18, 10, 2014), new TimeOfDay[lsB](15, 45), 15, "Buy present for John", calB, Bob);
		srv.addEvent(calB, eB, Bob, lsB,ldB);

		//System.out.println("Calendar of Alice");
		//srv.printCalendar("Alice");
		//System.out.println("Calendar of Bob");
		//srv.printCalendar("Bob");

		eB = new Event[lsB,ldB,ln](new Date[lsB](10, 11, 2014), new TimeOfDay[lsB](18, 10), 60, "Visit parents", calB, Bob);
	Event[lsA,ldA,ln]{*lsA} eAs = srv.requestSharedEvent(calB, calA, eB, Bob, Alice, lsB, ldB, lsA, ldA, 19871);
		srv.acceptSharedEvent(calA, eAs, Alice, lsA, ldA);
		//else System.out.println("Automatic rejection: "+e.toString()+"\n");

		eB = new Event[lsB,ldB,ln](new Date[lsB](16, 9, 2014), new TimeOfDay[lsB](16, 45), 20, "Visit aunts", calB, Bob);
		eAs = srv.requestSharedEvent(calB, calA, eB, Bob, Alice, lsB, ldB, lsA, ldA, 19872);
		srv.acceptSharedEvent(calA, eAs, Alice, lsA, ldA);
		//else System.out.println("Automatic rejection: "+e.toString()+"\n");

		eB = new Event[lsB,ldB,ln](new Date[lsB](20, 2, 2010), new TimeOfDay[lsB](8, 15), 120, "Go for cinema", calB, Bob);
		eAs = srv.requestSharedEvent(calB, calA, eB, Bob, Alice, lsB, ldB, lsA, ldA, 19873);
		srv.acceptSharedEvent(calA, eAs, Alice, lsA, ldA);
		//else System.out.println("Automatic rejection: "+e.toString()+"\n");

		eB = new Event[lsB,ldB,ln](new Date[lsB](30, 1, 2015), new TimeOfDay[lsB](21, 30), 120, "Go to concert", calB, Bob);
		eAs = srv.requestSharedEvent(calB, calA, eB, Bob, Alice, lsB, ldB, lsA, ldA, 19874);
		srv.acceptSharedEvent(calA, eAs, Alice, lsA, ldA);
		//else System.out.println("Automatic rejection: "+e.toString()+"\n");

		//System.out.println("Calendar of Alice");
		//srv.printCalendar("Alice");
		//System.out.println("Calendar of Bob");
		//srv.printCalendar("Bob");

		//System.out.println("Canceling of "+e1.toString()+"\n");
		srv.cancelEvent(calA, 19871, Alice, lsA, ldA);     //both Alice and Bob should be able to cancl their shared events

		//System.out.println("Calendar of Alice");
		//srv.printCalendar("Alice");
		//System.out.println("Calendar of Bob");
		//srv.printCalendar("Bob");

		//System.out.println("Public view of Alice");
		//rifList l = srv.takePubView(calA);
		//srv.printListOfEvents(l);

	}

}

