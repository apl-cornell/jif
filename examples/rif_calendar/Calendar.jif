public class Calendar[principal O, label Ls, label Ld] {//policy for cal is {rif[q0*:{_}];rifi[q1*:{O},q2:{},f7:q1->q2]}
//the current state of Ls and Ld is O for conf and integ,

	private final principal{rif[q0*:{_}];rifi[q1*:{}]} owner = O;
	private rifList[{rif[q0*:{_}];rifi[q1*:{}]}]{rif[q0*:{O},q1:{_},f3:q0->q1];rifi[q1*:{}]} eventList;
	private rifList[{rif[q0*:{_}];rifi[q1*:{}]}]{rif[q0*:{O},q1:{_},f3:q0->q1];rifi[q1*:{}]} requestEvents;
	private rifList[{rif[q0*:{_}];rifi[q1*:{}]}]{rif[q0*:{O},q1:{_},f3:q0->q1];rifi[q1*:{}]} pendingEvents;
	private rifList[{rif[q0*:{_}];rifi[q1*:{}]}]{rif[q0*:{O},q1:{_},f3:q0->q1];rifi[q1*:{}]} canceledEvents;

	public Calendar() {
		this.eventList = new rifList[{rif[q0*:{_}];rifi[q1*:{}]}]();
		this.requestEvents = new rifList[{rif[q0*:{_}];rifi[q1*:{}]}]();
		this.pendingEvents = new rifList[{rif[q0*:{_}];rifi[q1*:{}]}]();
		this.canceledEvents = new rifList[{rif[q0*:{_}];rifi[q1*:{}]}]();
	}

	public principal{rif[q0*:{_}];rifi[q1*:{O},q2:{},f7:q1->q2]} getOwner() {
		return this.owner;
	}

	public rifList[{rif[q0*:{_}];rifi[q1*:{}]}]{rif[q0*:{O},q1:{_},f3:q0->q1];rifi[q1*:{}]} getEventList() {
		return this.eventList;
	}

	public void addEvent{rif[q0*:{_}];rifi[q1*:{}]}(Event[{*ls},{*ld},{rif[q0*:{_}];rifi[q1*:{}]}]{*ls} e, label{rif[q0*:{_}];rifi[q1*:{}]} ls, label{rif[q0*:{_}];rifi[q1*:{}]} ld) 
	{
		rifList[{rif[q0*:{_}];rifi[q1*:{}]}]{rif[q0*:{O},q1:{_},f3:q0->q1];rifi[q1*:{}]} l2 = this.eventList;
		rifList[{rif[q0*:{_}];rifi[q1*:{}]}] l; //does not type-check if rifList[{rif[q0*:{_}];rifi[q1*:{}]}]{rif[q0*:{_}];rifi[q1*:{}]} l;
		l = reclassify(l2,f3);
		Node[{rif[q0*:{_}];rifi[q1*:{}]}]{rif[q0*:{_}];rifi[q1*:{}]} n;
		try{	n=l.add(e,ls);  //make this change to all methods!!!
			e.setNode(n);}
		catch (NullPointerException impossible) { 
			// lt will never be null, and so nothing is learned by this declassification
		}
	}

	//the server creates one copy of a requested shared event for every participant with individual conf/integ policies
	public void addRequestEvent{rif[q0*:{_}];rifi[q1*:{}]}(Event[Ls,Ld,{rif[q0*:{_}];rifi[q1*:{}]}]{Ls} e){
		rifList[{rif[q0*:{_}];rifi[q1*:{}]}]{rif[q0*:{O},q1:{_},f3:q0->q1];rifi[q1*:{}]} l2 = this.requestEvents;
		rifList[{rif[q0*:{_}];rifi[q1*:{}]}] l;
		l = reclassify(l2,f3);
		Node[{rif[q0*:{_}];rifi[q1*:{}]}]{rif[q0*:{_}];rifi[q1*:{}]} n;
		try{	n=l.add(e,Ls);
			e.setNode(n);}
		catch (NullPointerException impossible) {}
	}

	public void addPendingEvent{rif[q0*:{_}];rifi[q1*:{}]}(Event[Ls,Ld,{rif[q0*:{_}];rifi[q1*:{}]}]{Ls} e){
		rifList[{rif[q0*:{_}];rifi[q1*:{}]}]{rif[q0*:{O},q1:{_},f3:q0->q1];rifi[q1*:{}]} l2 = this.pendingEvents;
		rifList[{rif[q0*:{_}];rifi[q1*:{}]}] l;
		l = reclassify(l2,f3);
		Node[{rif[q0*:{_}];rifi[q1*:{}]}]{rif[q0*:{_}];rifi[q1*:{}]} n;
		try{	n=l.add(e,Ls);
			e.setNode(n);}
		catch (NullPointerException impossible) {}
	}

//inconsistent syntax of tr(L,f)!!!

	public Object{Ls} acceptPendingEvent{rif[q0*:{_}];rifi[q1*:{}]}(Event[Ls,Ld,{rif[q0*:{_}];rifi[q1*:{}]}]{Ls} se)
		where tr(Ls,f9)<={rif[q0*:{_}];rifi[q1*:{}]}, Ls<=Ld
	{
  		rifList[{rif[q0*:{_}];rifi[q1*:{}]}]{rif[q0*:{O},q1:{_},f3:q0->q1];rifi[q1*:{}]} pe2 = this.pendingEvents;
		rifList[{rif[q0*:{_}];rifi[q1*:{}]}] pe = reclassify(pe2,f3);
		Object{Ls} p = null;
		try{
			Event[Ls,Ld,{rif[q0*:{_}];rifi[q1*:{}]}] e2 = reclassify(se,f9);
			pe.remove(reclassify(e2.getNode(),f9));
			Event[Ls,Ld,{rif[q0*:{_}];rifi[q1*:{}]}]{tr({Ls},f7)} e = reclassify(se,f7);
			Date[Ls]{tr({Ls},f7)} d= reclassify(e.getDate(),f7);
			Date[new label tr(Ls,f7)]{tr({Ls},f7)} date = 
				new Date[new label tr(Ls,f7)](reclassify(d.getDay(),f7),reclassify(d.getMonth(),f7), reclassify(d.getYear(),f7));
			TimeOfDay[Ls]{tr({Ls},f7)} t = reclassify(e.getTime(),f7);
			TimeOfDay[new label tr(Ls,f7)]{tr({Ls},f7)} time = 
				new TimeOfDay[new label tr(Ls,f7)](reclassify(t.getHour(),f7),reclassify(t.getMinute(),f7));
			Event[new label tr(Ls,f7),{tr({Ld},f7)},{rif[q0*:{_}];rifi[q1*:{}]}]{tr({Ls},f7)} ne = 
				new Event[new label tr(Ls,f7),{tr({Ld},f7)},{rif[q0*:{_}];rifi[q1*:{}]}](
				date, time, 
				reclassify(e.getDuration(),f7), 
				reclassify(e.getDescription(),f7), 
				reclassify(e.getCreatorCal(),f7), reclassify(e.getCreator(),f7));
			addEvent(ne,new label tr(Ls,f7),new label tr(Ld,f7));
			p=se.getCreatorCal();
		}catch (NullPointerException impossible) {}
		return p;
	}

	public void requestedEventAccepted{rif[q0*:{_}];rifi[q1*:{}]}(Event[Ls,Ld,{rif[q0*:{_}];rifi[q1*:{}]}]{Ls} se)
		where tr(Ls,f9)<={rif[q0*:{_}];rifi[q1*:{}]}
	{
  		rifList[{rif[q0*:{_}];rifi[q1*:{}]}]{rif[q0*:{O},q1:{_},f3:q0->q1];rifi[q1*:{}]} re2 = this.requestEvents;
		rifList[{rif[q0*:{_}];rifi[q1*:{}]}] re = reclassify(re2,f3);
		try{
			Event[Ls,Ld,{rif[q0*:{_}];rifi[q1*:{}]}] e2 = reclassify(se,f9);
			re.remove(reclassify(e2.getNode(),f9));
			Event[Ls,Ld,{rif[q0*:{_}];rifi[q1*:{}]}]{tr({Ls},f7)} e = reclassify(se,f7);
			Date[Ls]{tr({Ls},f7)} d= reclassify(e.getDate(),f7);
			Date[new label tr(Ls,f7)]{tr({Ls},f7)} date = 
				new Date[new label tr(Ls,f7)](reclassify(d.getDay(),f7),reclassify(d.getMonth(),f7), reclassify(d.getYear(),f7));
			TimeOfDay[Ls]{tr({Ls},f7)} t = reclassify(e.getTime(),f7);
			TimeOfDay[new label tr(Ls,f7)]{tr({Ls},f7)} time = 
				new TimeOfDay[new label tr(Ls,f7)](reclassify(t.getHour(),f7),reclassify(t.getMinute(),f7));
			Event[new label tr(Ls,f7),{tr({Ld},f7)},{rif[q0*:{_}];rifi[q1*:{}]}]{tr({Ls},f7)} ne = 
				new Event[new label tr(Ls,f7),{tr({Ld},f7)},{rif[q0*:{_}];rifi[q1*:{}]}](
				date, time, 
				reclassify(e.getDuration(),f7), 
				reclassify(e.getDescription(),f7), 
				reclassify(e.getCreatorCal(),f7),reclassify(e.getCreator(),f7));
			addEvent(ne,new label tr(Ls,f7),new label tr(Ld,f7));
		}catch (NullPointerException impossible) {}
	}

	//assume se is a shared event
	public rifList[{tr({Ld},f7)}]{tr({Ld},f7)} cancelEvent
		{rif[q0*:{_}];rifi[q1*:{}]}(Event[{tr({Ls},f7)},{tr({Ld},f7)},{rif[q0*:{_}];rifi[q1*:{}]}]{tr({Ls},f7)} se)
		where tr(tr(Ls,f7),f9)<={rif[q0*:{_}];rifi[q1*:{}]}

	{
		rifList[{rif[q0*:{_}];rifi[q1*:{}]}]{rif[q0*:{O},q1:{_},f3:q0->q1];rifi[q1*:{}]} el2 = this.eventList;
		rifList[{rif[q0*:{_}];rifi[q1*:{}]}] el = reclassify(el2,f3);
		rifList[{rif[q0*:{_}];rifi[q1*:{}]}]{rif[q0*:{O},q1:{_},f3:q0->q1];rifi[q1*:{}]} ce2 = this.canceledEvents;
		rifList[{rif[q0*:{_}];rifi[q1*:{}]}] ce = reclassify(ce2,f3);
		rifList[{tr({Ld},f7)}]{tr({Ld},f7)} sb = null;
		try{
			Event[{tr({Ls},f7)},{tr({Ld},f7)},{rif[q0*:{_}];rifi[q1*:{}]}] e2 = reclassify(se,f9);
			el.remove(reclassify(e2.getNode(),f9));
			Event[{tr({Ls},f7)},{tr({Ld},f7)},{rif[q0*:{_}];rifi[q1*:{}]}]{tr({tr({Ls},f7)},f8)} e = reclassify(se,f8);
			Date[{tr({Ls},f7)}]{tr({tr({Ls},f7)},f8)} d= reclassify(e.getDate(),f8);  //it does not work with Date[{tr({Ls},f7)}]{tr({se},f8)} d
			Date[{tr({tr({Ls},f7)},f8)}]{tr({tr({Ls},f7)},f8)} date = 
				new Date[{tr({tr({Ls},f7)},f8)}](reclassify(d.getDay(),f8),reclassify(d.getMonth(),f8), reclassify(d.getYear(),f8));
			TimeOfDay[{tr({Ls},f7)}]{tr({tr({Ls},f7)},f8)} t = reclassify(e.getTime(),f8);
			TimeOfDay[{tr({tr({Ls},f7)},f8)}]{tr({tr({Ls},f7)},f8)} time = 
				new TimeOfDay[{tr({tr({Ls},f7)},f8)}](reclassify(t.getHour(),f8),reclassify(t.getMinute(),f8));
			Event[{tr({tr({Ls},f7)},f8)},{tr({tr({Ld},f7)},f8)},{rif[q0*:{_}];rifi[q1*:{}]}]{tr({tr({Ls},f7)},f8)} ne = 
				new Event[{tr({tr({Ls},f7)},f8)},{tr({tr({Ld},f7)},f8)},{rif[q0*:{_}];rifi[q1*:{}]}](
				date, time, 
				reclassify(e.getDuration(),f8), 
				reclassify(e.getDescription(),f8), 
				reclassify(e.getCreatorCal(),f8),reclassify(e.getCreator(),f7));
			Node[{rif[q0*:{_}];rifi[q1*:{}]}]{rif[q0*:{_}];rifi[q1*:{}]} n;
			n=ce.add(ne, new label tr(tr(Ls,f7),f8));
			ne.setNode(n);
			sb = e.getSharedBetween();
		}catch (NullPointerException impossible) {}
		return sb;
	}

	public Event[Ls,Ld,{rif[q0*:{_}];rifi[q1*:{}]}]{Ls} findRequestedEvent{rif[q0*:{_}];rifi[q1*:{}]}(int{rif[q0*:{_}];rifi[q1*:{}]} bond){
		rifList[{rif[q0*:{_}];rifi[q1*:{}]}]{rif[q0*:{O},q1:{_},f3:q0->q1];rifi[q1*:{}]} re2 = this.requestEvents;
		rifList[{rif[q0*:{_}];rifi[q1*:{}]}] re = reclassify(re2,f3);
		int size;
		Event[Ls,Ld,{rif[q0*:{_}];rifi[q1*:{}]}]{Ls} fe=null;
		int i;
		try{
		size=re.getSize();
		Node[{rif[q0*:{_}];rifi[q1*:{}]}] n = re.getHead();
		for (i=0;i<size;i++) {
			try{
				final Node[{rif[q0*:{_}];rifi[q1*:{}]}] nd = n;
				if (nd.La <= Ls){
					Event[Ls,Ld,{rif[q0*:{_}];rifi[q1*:{}]}] e = (Event[Ls,Ld,{rif[q0*:{_}];rifi[q1*:{}]}]) nd.getData();
					if (e.getBond() == bond) 
						fe=e;
				}
				n=n.getNext();

			}catch (ClassCastException impossible) { }
		}
		}catch (NullPointerException impossible) {}
		return fe;
	}

/*	public boolean rejectOnConflict(Event ereq){
		rifList el = this.eventList;
		if (el == null) return false;
		int size=el.getSize();
		Node n = el.getHead();
		int i;
		for (i=0;i<size;i++) {
			try{
			if (n == null) return false;
			Event e = (Event) n.getData();
			if (ereq == null) return false;
			TimeOfDay ereqT = ereq.getTime();
			Date ereqDt = ereq.getDate();
			if (e == null) return false;
			TimeOfDay eT = e.getTime();
			Date eDt = e.getDate();
            if (ereq != null && ereqT != null && e!=null && eT!=null && eDt != null && ereqDt != null){
				int reqStart = ereqT.getHour()*60+ereqT.getMinute();
				int eStart = eT.getHour()*60+eT.getMinute();
				int eFinish = eStart+ e.getDuration();
				if (e.getAutoReject() && eDt.getYear()==ereqDt.getYear() && 
					eDt.getMonth()==ereqDt.getMonth() &&
					eDt.getDay()==ereqDt.getDay() && 
					eStart<=reqStart && reqStart<=eFinish){
					return true;
				}
			}
			n=n.getNext();
			}
			catch (ClassCastException impossible) { }
		}
		return false;
	}

	//applied only to events created and owned by just this user!
	public void publicizeSlot(Event e){
		rifList el = this.eventList;
		if (el != null && e != null){
			Event newe = new Event(e.getDate(), e.getTime(), e.getDuration(), e.getDescription(), e.getCreator());
			newe.setPubSlot(true);
			el.remove(e);
			el.add(newe);
		}
	}

	//applied only to events created and owned by just this user!
	public void hideSlot(Event e){
		rifList el = this.eventList;
		if (el != null && e != null){
			Event newe = new Event(e.getDate(), e.getTime(), e.getDuration(), e.getDescription(), e.getCreator());
			newe.setPubSlot(false);
			el.remove(e);
			el.add(newe);
		}
	}

	public rifList takePubView(){
		rifList el = this.eventList;
		if (el == null) return null;
		int size=el.getSize();
		Node n = el.getHead();
		rifList l = new rifList();
		int i;
		for (i=0;i<size;i++) {
			if (n == null) return null;
			try{
			Event e = (Event) n.getData();
			if (e != null && e.getPubSlot()){
				Event newe = new Event(e.getDate(), e.getTime(), e.getDuration(), null, null);
				l.add(newe);
			}
			n=n.getNext();
			}catch (ClassCastException impossible) { }
		}
		return l;
	}

	public String toString() {
		rifList el = this.eventList;
		if (el == null) return null;
		int size=el.getSize();
		int i;
		Node n = el.getHead();
		String output=null;
		for (i=0;i<size;i++) {
			if (n == null) return null;
			try{
			Event e = (Event) n.getData();
			if (e == null) return null;
			if (output==null) output=e.toString()+ "\n";
			else{
				output = output + e.toString() + "\n";
			}
			n=n.getNext();
			}catch (ClassCastException impossible) { }
		}
		return output;
	}
*/
}

