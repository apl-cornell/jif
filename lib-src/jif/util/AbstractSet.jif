package jif.util;

public abstract class AbstractSet[label L] extends AbstractCollection[L] implements Set[L] {
    protected AbstractSet() {
    }


    public boolean{L} removeAll{L}(Collection[L]{L} c) {
	if (c == null) return false;

        boolean modified = false;

        if (size() > c.size()) {
            for (Iterator[L] i = c.iterator(); i != null && i.hasNext(); )
		try {
		    modified |= remove(i.next());
		}
		catch (NoSuchElementException impossible) { }
        } else {
            for (Iterator[L] i = iterator(); i != null && i.hasNext(); ) {
		try {
		    if(c.contains(i.next())) {
			i.remove();
			modified = true;
		    }
		}
		catch (NoSuchElementException impossible) { }
		catch (IllegalStateException impossible) { }

            }
        }
        return modified;
    }

}
