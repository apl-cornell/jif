package jif.util;

public abstract class AbstractCollection[label L] implements Collection[L] {
    /**
     * Sole constructor.  (For invocation by subclass constructors, typically
     * implicit.)
     */
    protected AbstractCollection() {
    }

    // Query Operations

    public abstract Iterator[L]{this} iterator();

    public abstract int{L} size();

    public boolean{L} isEmpty() {
	return size() == 0;
    }

    // Modification Operations

    public boolean{L} remove{L}(JifObject[L]{L} o) {
	try {
	    Iterator[L] e = iterator();
	    if (e != null) {
		if (o==null) {
		    while (e.hasNext()) {
			if (e.next()==null) {
			    e.remove();
			    return true;
			}
		    }
		} else {
		    while (e.hasNext()) {
			if (o.equals(e.next())) {
			    e.remove();
			    return true;
			}
		    }
		}
	    }
	}
	catch (IllegalStateException e) { /* cant happen */ }
	catch (NoSuchElementException e) { /* cant happen */ }
	return false;
    }

    // Bulk Operations 
    public boolean{L} addAll{L}(Collection[L]{L} c) throws (ClassCastException{L}, IllegalArgumentException{L}) {
	boolean{this;L} modified = false;
	if (c != null) {
	    Iterator[L]{this;L} e = c.iterator();
	    while (e != null && e.hasNext()) {
		try {
		    if(add(e.next()))
			modified = true;
		}
		catch (NoSuchElementException impossible) { }
	    }
	}
	return modified;
    }

    public boolean{L} removeAll{L}(Collection[L]{L} c) {
	boolean modified = false;
	if (c != null) {
	    Iterator[L] e = iterator();
	    while (e != null && e.hasNext()) {
		try {
		    if(c.contains(e.next())) {
			e.remove();
			modified = true;
		    }
		}
		catch (IllegalStateException impossible) { }
		catch (NoSuchElementException impossible) { }
	    }
	}
	return modified;
    }

    public boolean{L} retainAll{L}(Collection[L]{L} c) {
	boolean modified = false;
	Iterator[L] e = iterator();
	while (e != null && e.hasNext()) {
	    try {
		JifObject[L] o = e.next();
		if(c == null || !c.contains(o)) {
		    e.remove();
		    modified = true;
		}
	    }
	    catch (IllegalStateException impossible) { }
	    catch (NoSuchElementException impossible) { }
	}
	return modified;
    }

    public void clear{L}() {
	Iterator[L] e = iterator();
	while (e != null && e.hasNext()) {
	    try {
		e.next();
		e.remove();
	    }
	    catch (IllegalStateException impossible) { }
	    catch (NoSuchElementException impossible) { }

	}
    }
}
