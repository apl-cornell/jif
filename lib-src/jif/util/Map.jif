package jif.util;
/*
 * Jif Signature for the Map interface
 *
 */
public interface Map[label K, label V] extends JifObject[{K;V}] {
    // Query Operations

    int{K} size();

    boolean{K} isEmpty();

    boolean{K;key} containsKey(JifObject[K] key);

    // the following is removed since it can be emulated using the containsKey method
    //boolean{K;value} containsValue(JifObject[V] value);

    JifObject[V]{K; key} get(JifObject[K] key);

    // Modifying Operations
    JifObject[V]{K} put{K}(JifObject[K]{K} key, JifObject[V]{K} value);
    JifObject[V]{K} remove{K}(JifObject[K]{K} key);

    // the following is removed since it can be emulated with the put method
    //void putAll{K}(Map[K,V]{K} t);
    void clear{K}();

    // Views
    Set[K] keySet();

    // the following is removed since it can be emulated with the keySet and get methods
    //Collection[{K;V}] values();

    // the following is removed since it can be emulated with the keySet and get methods
    //Set[{K;V}] entrySet(); // Set[K] ?
}
