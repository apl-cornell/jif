package jif.util.generics;

/**
 * An implementatin of Set, using a linked list to store the
 * list elements.
 */
public class LinkedListSet[label L, type T, type E extends Equality[T], 
        type S extends Stringify[T], type H extends Hasher[T]] extends AbstractSet[L, T, E, S, H] 
{
    private final LinkedList[L, T, E, S, H]{this} list;

    public LinkedListSet(E{L} equality, S{L} stringify, H{L} hasher) {
        list = new LinkedList[L, T, E, S, H](equality, stringify, hasher);
        super(equality, stringify, hasher);
    }
    public int{L} size() {
        try {
            return list.size();
        }
        catch (NullPointerException impossible) { return 0;}
    }


    public boolean{L;*lbl;lbl;o} contains(label lbl, T o) {
        try {
            return list.contains(lbl,o);
        }
        catch (NullPointerException impossible) { return false;}
    }

    public boolean{L} add{L}(T{L} o) {
        try {
            if (!list.contains(o)) {
                list.add(o);
                return true;
            }
            return false;
        }
        catch (NullPointerException impossible) { return false;}
    }

    public T{L;index} get(int index):{L;index} throws (IndexOutOfBoundsException{L;index}) {
        try {
            return list.get(index);
        }
        catch (NullPointerException impossible) { return null;}
    }
    
    public boolean{L} remove{L}(T{L} o) {
        try {
            return list.remove(o);
        }
        catch (NullPointerException impossible) { return false;}
    }
    
    public Iterator[L, T]{this} iterator() {
        try {
            return list.iterator();
        }
        catch (NullPointerException impossible) { return null;}        
    }

    public int{L} hashCode() {
        try {
            return list.hashCode();
        }
        catch (NullPointerException impossible) { return 0;}

    }

    //  String conversion
    public String{L} toString() {
        try {
            return list.toString();
        }
        catch (NullPointerException impossible) { return "";}
    }

}
