import jif.util.*;
import jif.runtime.Runtime;
import java.io.PrintStream;

public class SetTest
{
	public static void main{Alice:}(principal pp, String[] args) throws (ClassCastException{Alice:}, IllegalArgumentException{Alice:})
	{
		final label A = new label {Alice:};
                Set[A] set = new HashSet[A]();
                Set[A] setB = new LinkedListSet[A]();
		
		Key[A]{A} one = new Key[A](1);
		Key[A]{A} two = new Key[A](2);
		Key[A]{A} three = new Key[A](3);
		Key[A]{A} four = new Key[A](4);
				
                set.add(one);
                set.add(two);
                set.add(three);
                set.add(four);

                setB.add(one);
                setB.add(two);
                setB.add(three);
                setB.add(four);

                set.remove(two);
                
                set.clear();

                for (int i = 0; i < 100000; i++) {
                    set.add(new Key[A](i));                    
                }
                for (int i = 0; i < 100000; i++) {
                    set.remove(new Key[A](i));                    
                }
                for (int i = 0; i < 100000; i++) {
                    set.add(new Key[A](i));                    
                }
                set.clear();
		/*
		final principal nullP = null;
		Runtime[nullP] runtime;    
		PrintStream[{*A;*B}] out = null;
		try {
			runtime = Runtime[nullP].getRuntime();
			if (runtime == null) return;
			out = runtime.stdout(new label {*A;*B});
		}
		catch (SecurityException e) { }
		if (out == null) return;
		
		out.println("Hello World");
		*/
	}
}

class Key[label L] implements JifObject[L] {
    private final int{this} number;
    
    Key(int{this} num) {
        number = num;
    }
    
    public boolean{L; *lbl; lbl; obj} equals(label lbl, IDComparable[lbl] obj) {
        if(obj == this) return true;
        if (obj instanceof Key[lbl]) {                
            Key[lbl] other = (Key[lbl])obj;
            
            return (other.number == this.number);
        }
        
        return false;            
    }
    public boolean{L; obj} equals(IDComparable[L] obj) {
        return equals(L, obj);
    }
    
    public int{L} hashCode() {
        return number;
    }
    
    public String{L} toString() {
        return "#" + Integer.toString(number);
    }
}
