package mapapp;

import java.io.PrintStream;

import jif.runtime.Runtime;

import mapserv.MapServer;
import mapserv.MapImage;
import mapserv.Box;
import snapp.UserV1;
import util.GroupIterator;

/**
 * This is the mapping application.  A MapApp is instantiated with a particular
 * mapping service, and then can be run by any User to generate private or
 * public output maps.
 */
public class MapApp extends AbstractPrincipal {
  public final MapServer {this←} service;

  public MapApp(String name, MapServer service, Principal owner) {
    this.service = service;
    super(name);
    this.addDelegatesTo(owner);
  }



  /**
   * prints a map of the user's friends, visible to the user
   */
  public
  void
  viewMap
  (
    UserV1 user
  )
  where
    service actsfor user.friendInfo
  {
    MapImage result = createMap(new label {user→}, user);

    PrintStream[{user→}] out = Runtime[user].getRuntime().stdout(new label {user→});
    result.print(out);
  }



  /**
   * prints a map of the user's friends, visible to the user's friends
   */
  public
  void
  postMap
  (
    final UserV1 user
  )
  where
    service actsfor user.friendInfo
  {
    MapImage result = createMap(new label {user→user.friends}, user);

    PrintStream[{user→user.friends}] out = Runtime[user].getRuntime().stdout(new label {user→user.friends});
    result.print(out);
  }



  /**
   * creates a map of the user's friends, visible at label l
   */
  public
  MapImage[l]
  createMap
  (
    label l,
    final UserV1 user
  )
  where
    {service←} <= l,
    service actsfor user.friendInfo
  {
    // this is the label of the data that gets sent to the service
    final label serviceLabel = new label {service→};
    final label fetchLabel   = new label {*l meet serviceLabel};

    // compute the bounding box
    Box boundary = new Box(0,0,0,0);
    GroupIterator i = user.friends.iterator();
    while (i.hasNext()) {
      Principal next = i.next();

      if (next instanceof UserV1) {
        final UserV1 friend = (UserV1) next;

        // if the friend doesn't mind his location leaking to the map service,
        // then we expand the bounding box to contain him
        if (friend.locationLabel <= fetchLabel) {
          boundary = boundary.expand(friend.location.x, friend.location.y);
        }

        // TODO: declassifiers
        else {
        }

        // otherwise we leave him off the map.
      }
    }

    // get map
    MapImage[fetchLabel] map = this.service.getMap(fetchLabel, boundary);

    // make a local copy (with label l)
    MapImage[l] annotated = map.copy(l, /* TODO: local store */ null);

    // annotate map
    i = user.friends.iterator();
    while (i.hasNext()) {
      Principal next = i.next();
      if (next instanceof UserV1) {
        final UserV1 friend = (UserV1) next;

        // add friend to the map if possible
        if (friend.locationLabel <= l)
          if (annotated.boundary.contains(friend.location.x, friend.location.y))
            annotated.setAt(friend.location.x, friend.location.y, 'f');
      }
    }

    return annotated;
  }
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
