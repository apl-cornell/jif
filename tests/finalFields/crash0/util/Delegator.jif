package util;

/**
 * Convenience principal class the delegates to a single owner.
 */
public class Delegator implements Principal {
  protected final String    {this←} name;
  protected final principal {this←} owner;

  protected
  Delegator {owner←}
  (
    String{owner←}    name,
    principal{owner←} owner
  )
  where authority(this)
  {
    this.owner = endorse(owner, {owner←} to {this←});
    this.name  = endorse(name,  {owner←} to {this←});
  }

  //////////////////////////////////////////////////////////////////////////////
  // Principal methods                                                        //
  //////////////////////////////////////////////////////////////////////////////

  public String{this} name() {
    // TODO
    return "";
  }

  public boolean{this;p;this←} delegatesTo(principal p) {
    return p == owner;
  }

  public boolean equals(Principal p) {
    // TODO
    return false;
  }

  public
  boolean{authPrf; closure; lb; *lb; executeNow; this; this←}
  isAuthorized {this←}
              (Object           authPrf,
               Closure[this,lb] closure,
               label            lb,
               boolean          executeNow)
  where authority(this),
        {authPrf;closure;lb;executeNow} <= lb
  {
    // TODO
    return false;
  }

  public
  ActsForProof{this; p; this←; p←}
  findProofUpto {this←}
               (Principal p,
                Object searchState)
  {
    // TODO
    return null;
  }

  public
  ActsForProof{this; p; p←; this←}
  findProofDownto {this←}
                 (Principal p,
                  Object searchState)
  {
    // TODO
    return null;
  }
}


/*
** vim: ts=2 sw=2 et cindent cino=\:0 syntax=java
*/
