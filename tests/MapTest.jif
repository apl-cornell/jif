import jif.util.*;

public class MapTest
{
  public static void main(String[] args)
  {
    final label A = new label {Alice:};
    final label B = new label {Bob:};
    Map[A,B] map = new ArrayMap[A,B]();

    Key[A]{A} one = new Key[A](1);
    Key[A]{A} two = new Key[A](2);
    Key[A]{A} three = new Key[A](3);
    Key[A]{A} four = new Key[A](4);
    
    Key[B]{A} oneValue = new Key[B](1);
    Key[B]{A} twoValue = new Key[B](2);
    Key[B]{A} threeValue = new Key[B](3);
    Key[B]{A} fourValue = new Key[B](4);

    map.put(one, oneValue);
    map.put(two, twoValue);
    map.put(three, threeValue);
    map.put(four, fourValue);
  }
}

class Key[label L] implements JifObject[L]
{
  private final int number;

  Key(int num)
  {
    number = num;
  }

  public boolean{L; obj} equals(IDComparable[L] obj)
  {
    if(obj == null)
    {
      return false;
    }
    if(obj == this)
    {
      return true;
    }
    
    Key[L] other = null;
    
    try
    {
      other = (Key[L])obj;
    } catch (ClassCastException e) {return false;}

      if(other.number == this.number)
      {
        return true;
      }

    return false;
  }
  
  public int{L} hashCode()
  {
    return number;
  }

  public String{L} toString()
  {
    return "#number - " + Integer.toString(number) + " ";
  }
}
