// a list whose contents are protected by L. Actually this is
// not necessary because the list is immutable. See List2.

//import jif.util.List;

public class PairList[label L] { // implements List[L] {
  private Object{L} head;
  private TestList[L]{L} tail;

  public Object first():{L} {
    return head;
  }

  public TestList[L] rest():{L} {
    return tail;
  }

  public Object get(int i): {L; i} throws (IndexOutOfBoundsException{L;i}) {
    if (i == 0) return head;

    try {
	return tail.get(i-1);
    }
    catch (Exception e) {
	throw new IndexOutOfBoundsException();
    }
  }

  public int{L} size() {
    try {
	return 1 + tail.size();
    }
    catch (NullPointerException e) {
	return 1;
    }
  }
}
